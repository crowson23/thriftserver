/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dc.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-06")
public class DcDbService {

  public interface Iface {

    public GetResponseDeliverInfo sendDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName) throws org.apache.thrift.TException;

    public GetResponseQuota sendRequestQuotaList(List<RequestQuota> requestQuotaList, long ip, String dbName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendRequestQuotaList(List<RequestQuota> requestQuotaList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public GetResponseDeliverInfo sendDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName) throws org.apache.thrift.TException
    {
      send_sendDeliverInfoList(requestDeliverInfoList, ip, dbName);
      return recv_sendDeliverInfoList();
    }

    public void send_sendDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName) throws org.apache.thrift.TException
    {
      sendDeliverInfoList_args args = new sendDeliverInfoList_args();
      args.setRequestDeliverInfoList(requestDeliverInfoList);
      args.setIp(ip);
      args.setDbName(dbName);
      sendBase("sendDeliverInfoList", args);
    }

    public GetResponseDeliverInfo recv_sendDeliverInfoList() throws org.apache.thrift.TException
    {
      sendDeliverInfoList_result result = new sendDeliverInfoList_result();
      receiveBase(result, "sendDeliverInfoList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendDeliverInfoList failed: unknown result");
    }

    public GetResponseQuota sendRequestQuotaList(List<RequestQuota> requestQuotaList, long ip, String dbName) throws org.apache.thrift.TException
    {
      send_sendRequestQuotaList(requestQuotaList, ip, dbName);
      return recv_sendRequestQuotaList();
    }

    public void send_sendRequestQuotaList(List<RequestQuota> requestQuotaList, long ip, String dbName) throws org.apache.thrift.TException
    {
      sendRequestQuotaList_args args = new sendRequestQuotaList_args();
      args.setRequestQuotaList(requestQuotaList);
      args.setIp(ip);
      args.setDbName(dbName);
      sendBase("sendRequestQuotaList", args);
    }

    public GetResponseQuota recv_sendRequestQuotaList() throws org.apache.thrift.TException
    {
      sendRequestQuotaList_result result = new sendRequestQuotaList_result();
      receiveBase(result, "sendRequestQuotaList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendRequestQuotaList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendDeliverInfoList_call method_call = new sendDeliverInfoList_call(requestDeliverInfoList, ip, dbName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendDeliverInfoList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<RequestDeliverInfo> requestDeliverInfoList;
      private long ip;
      private String dbName;
      public sendDeliverInfoList_call(List<RequestDeliverInfo> requestDeliverInfoList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestDeliverInfoList = requestDeliverInfoList;
        this.ip = ip;
        this.dbName = dbName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendDeliverInfoList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendDeliverInfoList_args args = new sendDeliverInfoList_args();
        args.setRequestDeliverInfoList(requestDeliverInfoList);
        args.setIp(ip);
        args.setDbName(dbName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetResponseDeliverInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendDeliverInfoList();
      }
    }

    public void sendRequestQuotaList(List<RequestQuota> requestQuotaList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendRequestQuotaList_call method_call = new sendRequestQuotaList_call(requestQuotaList, ip, dbName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendRequestQuotaList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<RequestQuota> requestQuotaList;
      private long ip;
      private String dbName;
      public sendRequestQuotaList_call(List<RequestQuota> requestQuotaList, long ip, String dbName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestQuotaList = requestQuotaList;
        this.ip = ip;
        this.dbName = dbName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendRequestQuotaList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendRequestQuotaList_args args = new sendRequestQuotaList_args();
        args.setRequestQuotaList(requestQuotaList);
        args.setIp(ip);
        args.setDbName(dbName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetResponseQuota getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendRequestQuotaList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendDeliverInfoList", new sendDeliverInfoList());
      processMap.put("sendRequestQuotaList", new sendRequestQuotaList());
      return processMap;
    }

    public static class sendDeliverInfoList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendDeliverInfoList_args> {
      public sendDeliverInfoList() {
        super("sendDeliverInfoList");
      }

      public sendDeliverInfoList_args getEmptyArgsInstance() {
        return new sendDeliverInfoList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendDeliverInfoList_result getResult(I iface, sendDeliverInfoList_args args) throws org.apache.thrift.TException {
        sendDeliverInfoList_result result = new sendDeliverInfoList_result();
        result.success = iface.sendDeliverInfoList(args.requestDeliverInfoList, args.ip, args.dbName);
        return result;
      }
    }

    public static class sendRequestQuotaList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendRequestQuotaList_args> {
      public sendRequestQuotaList() {
        super("sendRequestQuotaList");
      }

      public sendRequestQuotaList_args getEmptyArgsInstance() {
        return new sendRequestQuotaList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendRequestQuotaList_result getResult(I iface, sendRequestQuotaList_args args) throws org.apache.thrift.TException {
        sendRequestQuotaList_result result = new sendRequestQuotaList_result();
        result.success = iface.sendRequestQuotaList(args.requestQuotaList, args.ip, args.dbName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendDeliverInfoList", new sendDeliverInfoList());
      processMap.put("sendRequestQuotaList", new sendRequestQuotaList());
      return processMap;
    }

    public static class sendDeliverInfoList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendDeliverInfoList_args, GetResponseDeliverInfo> {
      public sendDeliverInfoList() {
        super("sendDeliverInfoList");
      }

      public sendDeliverInfoList_args getEmptyArgsInstance() {
        return new sendDeliverInfoList_args();
      }

      public AsyncMethodCallback<GetResponseDeliverInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetResponseDeliverInfo>() { 
          public void onComplete(GetResponseDeliverInfo o) {
            sendDeliverInfoList_result result = new sendDeliverInfoList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendDeliverInfoList_result result = new sendDeliverInfoList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendDeliverInfoList_args args, org.apache.thrift.async.AsyncMethodCallback<GetResponseDeliverInfo> resultHandler) throws TException {
        iface.sendDeliverInfoList(args.requestDeliverInfoList, args.ip, args.dbName,resultHandler);
      }
    }

    public static class sendRequestQuotaList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendRequestQuotaList_args, GetResponseQuota> {
      public sendRequestQuotaList() {
        super("sendRequestQuotaList");
      }

      public sendRequestQuotaList_args getEmptyArgsInstance() {
        return new sendRequestQuotaList_args();
      }

      public AsyncMethodCallback<GetResponseQuota> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetResponseQuota>() { 
          public void onComplete(GetResponseQuota o) {
            sendRequestQuotaList_result result = new sendRequestQuotaList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendRequestQuotaList_result result = new sendRequestQuotaList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendRequestQuotaList_args args, org.apache.thrift.async.AsyncMethodCallback<GetResponseQuota> resultHandler) throws TException {
        iface.sendRequestQuotaList(args.requestQuotaList, args.ip, args.dbName,resultHandler);
      }
    }

  }

  public static class sendDeliverInfoList_args implements org.apache.thrift.TBase<sendDeliverInfoList_args, sendDeliverInfoList_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendDeliverInfoList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDeliverInfoList_args");

    private static final org.apache.thrift.protocol.TField REQUEST_DELIVER_INFO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDeliverInfoList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendDeliverInfoList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendDeliverInfoList_argsTupleSchemeFactory());
    }

    public List<RequestDeliverInfo> requestDeliverInfoList; // required
    public long ip; // required
    public String dbName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_DELIVER_INFO_LIST((short)1, "requestDeliverInfoList"),
      IP((short)2, "ip"),
      DB_NAME((short)3, "dbName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_DELIVER_INFO_LIST
            return REQUEST_DELIVER_INFO_LIST;
          case 2: // IP
            return IP;
          case 3: // DB_NAME
            return DB_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_DELIVER_INFO_LIST, new org.apache.thrift.meta_data.FieldMetaData("requestDeliverInfoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestDeliverInfo.class))));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDeliverInfoList_args.class, metaDataMap);
    }

    public sendDeliverInfoList_args() {
    }

    public sendDeliverInfoList_args(
      List<RequestDeliverInfo> requestDeliverInfoList,
      long ip,
      String dbName)
    {
      this();
      this.requestDeliverInfoList = requestDeliverInfoList;
      this.ip = ip;
      setIpIsSet(true);
      this.dbName = dbName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDeliverInfoList_args(sendDeliverInfoList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequestDeliverInfoList()) {
        List<RequestDeliverInfo> __this__requestDeliverInfoList = new ArrayList<RequestDeliverInfo>(other.requestDeliverInfoList.size());
        for (RequestDeliverInfo other_element : other.requestDeliverInfoList) {
          __this__requestDeliverInfoList.add(new RequestDeliverInfo(other_element));
        }
        this.requestDeliverInfoList = __this__requestDeliverInfoList;
      }
      this.ip = other.ip;
      if (other.isSetDbName()) {
        this.dbName = other.dbName;
      }
    }

    public sendDeliverInfoList_args deepCopy() {
      return new sendDeliverInfoList_args(this);
    }

    @Override
    public void clear() {
      this.requestDeliverInfoList = null;
      setIpIsSet(false);
      this.ip = 0;
      this.dbName = null;
    }

    public int getRequestDeliverInfoListSize() {
      return (this.requestDeliverInfoList == null) ? 0 : this.requestDeliverInfoList.size();
    }

    public java.util.Iterator<RequestDeliverInfo> getRequestDeliverInfoListIterator() {
      return (this.requestDeliverInfoList == null) ? null : this.requestDeliverInfoList.iterator();
    }

    public void addToRequestDeliverInfoList(RequestDeliverInfo elem) {
      if (this.requestDeliverInfoList == null) {
        this.requestDeliverInfoList = new ArrayList<RequestDeliverInfo>();
      }
      this.requestDeliverInfoList.add(elem);
    }

    public List<RequestDeliverInfo> getRequestDeliverInfoList() {
      return this.requestDeliverInfoList;
    }

    public sendDeliverInfoList_args setRequestDeliverInfoList(List<RequestDeliverInfo> requestDeliverInfoList) {
      this.requestDeliverInfoList = requestDeliverInfoList;
      return this;
    }

    public void unsetRequestDeliverInfoList() {
      this.requestDeliverInfoList = null;
    }

    /** Returns true if field requestDeliverInfoList is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestDeliverInfoList() {
      return this.requestDeliverInfoList != null;
    }

    public void setRequestDeliverInfoListIsSet(boolean value) {
      if (!value) {
        this.requestDeliverInfoList = null;
      }
    }

    public long getIp() {
      return this.ip;
    }

    public sendDeliverInfoList_args setIp(long ip) {
      this.ip = ip;
      setIpIsSet(true);
      return this;
    }

    public void unsetIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IP_ISSET_ID);
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return EncodingUtils.testBit(__isset_bitfield, __IP_ISSET_ID);
    }

    public void setIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IP_ISSET_ID, value);
    }

    public String getDbName() {
      return this.dbName;
    }

    public sendDeliverInfoList_args setDbName(String dbName) {
      this.dbName = dbName;
      return this;
    }

    public void unsetDbName() {
      this.dbName = null;
    }

    /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
    public boolean isSetDbName() {
      return this.dbName != null;
    }

    public void setDbNameIsSet(boolean value) {
      if (!value) {
        this.dbName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_DELIVER_INFO_LIST:
        if (value == null) {
          unsetRequestDeliverInfoList();
        } else {
          setRequestDeliverInfoList((List<RequestDeliverInfo>)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((Long)value);
        }
        break;

      case DB_NAME:
        if (value == null) {
          unsetDbName();
        } else {
          setDbName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_DELIVER_INFO_LIST:
        return getRequestDeliverInfoList();

      case IP:
        return getIp();

      case DB_NAME:
        return getDbName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_DELIVER_INFO_LIST:
        return isSetRequestDeliverInfoList();
      case IP:
        return isSetIp();
      case DB_NAME:
        return isSetDbName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDeliverInfoList_args)
        return this.equals((sendDeliverInfoList_args)that);
      return false;
    }

    public boolean equals(sendDeliverInfoList_args that) {
      if (that == null)
        return false;

      boolean this_present_requestDeliverInfoList = true && this.isSetRequestDeliverInfoList();
      boolean that_present_requestDeliverInfoList = true && that.isSetRequestDeliverInfoList();
      if (this_present_requestDeliverInfoList || that_present_requestDeliverInfoList) {
        if (!(this_present_requestDeliverInfoList && that_present_requestDeliverInfoList))
          return false;
        if (!this.requestDeliverInfoList.equals(that.requestDeliverInfoList))
          return false;
      }

      boolean this_present_ip = true;
      boolean that_present_ip = true;
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (this.ip != that.ip)
          return false;
      }

      boolean this_present_dbName = true && this.isSetDbName();
      boolean that_present_dbName = true && that.isSetDbName();
      if (this_present_dbName || that_present_dbName) {
        if (!(this_present_dbName && that_present_dbName))
          return false;
        if (!this.dbName.equals(that.dbName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestDeliverInfoList = true && (isSetRequestDeliverInfoList());
      list.add(present_requestDeliverInfoList);
      if (present_requestDeliverInfoList)
        list.add(requestDeliverInfoList);

      boolean present_ip = true;
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_dbName = true && (isSetDbName());
      list.add(present_dbName);
      if (present_dbName)
        list.add(dbName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendDeliverInfoList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestDeliverInfoList()).compareTo(other.isSetRequestDeliverInfoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestDeliverInfoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDeliverInfoList, other.requestDeliverInfoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbName()).compareTo(other.isSetDbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendDeliverInfoList_args(");
      boolean first = true;

      sb.append("requestDeliverInfoList:");
      if (this.requestDeliverInfoList == null) {
        sb.append("null");
      } else {
        sb.append(this.requestDeliverInfoList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      sb.append(this.ip);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbName:");
      if (this.dbName == null) {
        sb.append("null");
      } else {
        sb.append(this.dbName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDeliverInfoList_argsStandardSchemeFactory implements SchemeFactory {
      public sendDeliverInfoList_argsStandardScheme getScheme() {
        return new sendDeliverInfoList_argsStandardScheme();
      }
    }

    private static class sendDeliverInfoList_argsStandardScheme extends StandardScheme<sendDeliverInfoList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDeliverInfoList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_DELIVER_INFO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.requestDeliverInfoList = new ArrayList<RequestDeliverInfo>(_list16.size);
                  RequestDeliverInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new RequestDeliverInfo();
                    _elem17.read(iprot);
                    struct.requestDeliverInfoList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setRequestDeliverInfoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ip = iprot.readI64();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbName = iprot.readString();
                struct.setDbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDeliverInfoList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestDeliverInfoList != null) {
          oprot.writeFieldBegin(REQUEST_DELIVER_INFO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requestDeliverInfoList.size()));
            for (RequestDeliverInfo _iter19 : struct.requestDeliverInfoList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeI64(struct.ip);
        oprot.writeFieldEnd();
        if (struct.dbName != null) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.dbName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDeliverInfoList_argsTupleSchemeFactory implements SchemeFactory {
      public sendDeliverInfoList_argsTupleScheme getScheme() {
        return new sendDeliverInfoList_argsTupleScheme();
      }
    }

    private static class sendDeliverInfoList_argsTupleScheme extends TupleScheme<sendDeliverInfoList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDeliverInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestDeliverInfoList()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetDbName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestDeliverInfoList()) {
          {
            oprot.writeI32(struct.requestDeliverInfoList.size());
            for (RequestDeliverInfo _iter20 : struct.requestDeliverInfoList)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetIp()) {
          oprot.writeI64(struct.ip);
        }
        if (struct.isSetDbName()) {
          oprot.writeString(struct.dbName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDeliverInfoList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.requestDeliverInfoList = new ArrayList<RequestDeliverInfo>(_list21.size);
            RequestDeliverInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new RequestDeliverInfo();
              _elem22.read(iprot);
              struct.requestDeliverInfoList.add(_elem22);
            }
          }
          struct.setRequestDeliverInfoListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readI64();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbName = iprot.readString();
          struct.setDbNameIsSet(true);
        }
      }
    }

  }

  public static class sendDeliverInfoList_result implements org.apache.thrift.TBase<sendDeliverInfoList_result, sendDeliverInfoList_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendDeliverInfoList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendDeliverInfoList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendDeliverInfoList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendDeliverInfoList_resultTupleSchemeFactory());
    }

    public GetResponseDeliverInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetResponseDeliverInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendDeliverInfoList_result.class, metaDataMap);
    }

    public sendDeliverInfoList_result() {
    }

    public sendDeliverInfoList_result(
      GetResponseDeliverInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDeliverInfoList_result(sendDeliverInfoList_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetResponseDeliverInfo(other.success);
      }
    }

    public sendDeliverInfoList_result deepCopy() {
      return new sendDeliverInfoList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetResponseDeliverInfo getSuccess() {
      return this.success;
    }

    public sendDeliverInfoList_result setSuccess(GetResponseDeliverInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetResponseDeliverInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDeliverInfoList_result)
        return this.equals((sendDeliverInfoList_result)that);
      return false;
    }

    public boolean equals(sendDeliverInfoList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendDeliverInfoList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendDeliverInfoList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendDeliverInfoList_resultStandardSchemeFactory implements SchemeFactory {
      public sendDeliverInfoList_resultStandardScheme getScheme() {
        return new sendDeliverInfoList_resultStandardScheme();
      }
    }

    private static class sendDeliverInfoList_resultStandardScheme extends StandardScheme<sendDeliverInfoList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendDeliverInfoList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetResponseDeliverInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendDeliverInfoList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendDeliverInfoList_resultTupleSchemeFactory implements SchemeFactory {
      public sendDeliverInfoList_resultTupleScheme getScheme() {
        return new sendDeliverInfoList_resultTupleScheme();
      }
    }

    private static class sendDeliverInfoList_resultTupleScheme extends TupleScheme<sendDeliverInfoList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendDeliverInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendDeliverInfoList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetResponseDeliverInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendRequestQuotaList_args implements org.apache.thrift.TBase<sendRequestQuotaList_args, sendRequestQuotaList_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendRequestQuotaList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRequestQuotaList_args");

    private static final org.apache.thrift.protocol.TField REQUEST_QUOTA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestQuotaList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendRequestQuotaList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendRequestQuotaList_argsTupleSchemeFactory());
    }

    public List<RequestQuota> requestQuotaList; // required
    public long ip; // required
    public String dbName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_QUOTA_LIST((short)1, "requestQuotaList"),
      IP((short)2, "ip"),
      DB_NAME((short)3, "dbName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_QUOTA_LIST
            return REQUEST_QUOTA_LIST;
          case 2: // IP
            return IP;
          case 3: // DB_NAME
            return DB_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_QUOTA_LIST, new org.apache.thrift.meta_data.FieldMetaData("requestQuotaList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestQuota.class))));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRequestQuotaList_args.class, metaDataMap);
    }

    public sendRequestQuotaList_args() {
    }

    public sendRequestQuotaList_args(
      List<RequestQuota> requestQuotaList,
      long ip,
      String dbName)
    {
      this();
      this.requestQuotaList = requestQuotaList;
      this.ip = ip;
      setIpIsSet(true);
      this.dbName = dbName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRequestQuotaList_args(sendRequestQuotaList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequestQuotaList()) {
        List<RequestQuota> __this__requestQuotaList = new ArrayList<RequestQuota>(other.requestQuotaList.size());
        for (RequestQuota other_element : other.requestQuotaList) {
          __this__requestQuotaList.add(new RequestQuota(other_element));
        }
        this.requestQuotaList = __this__requestQuotaList;
      }
      this.ip = other.ip;
      if (other.isSetDbName()) {
        this.dbName = other.dbName;
      }
    }

    public sendRequestQuotaList_args deepCopy() {
      return new sendRequestQuotaList_args(this);
    }

    @Override
    public void clear() {
      this.requestQuotaList = null;
      setIpIsSet(false);
      this.ip = 0;
      this.dbName = null;
    }

    public int getRequestQuotaListSize() {
      return (this.requestQuotaList == null) ? 0 : this.requestQuotaList.size();
    }

    public java.util.Iterator<RequestQuota> getRequestQuotaListIterator() {
      return (this.requestQuotaList == null) ? null : this.requestQuotaList.iterator();
    }

    public void addToRequestQuotaList(RequestQuota elem) {
      if (this.requestQuotaList == null) {
        this.requestQuotaList = new ArrayList<RequestQuota>();
      }
      this.requestQuotaList.add(elem);
    }

    public List<RequestQuota> getRequestQuotaList() {
      return this.requestQuotaList;
    }

    public sendRequestQuotaList_args setRequestQuotaList(List<RequestQuota> requestQuotaList) {
      this.requestQuotaList = requestQuotaList;
      return this;
    }

    public void unsetRequestQuotaList() {
      this.requestQuotaList = null;
    }

    /** Returns true if field requestQuotaList is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestQuotaList() {
      return this.requestQuotaList != null;
    }

    public void setRequestQuotaListIsSet(boolean value) {
      if (!value) {
        this.requestQuotaList = null;
      }
    }

    public long getIp() {
      return this.ip;
    }

    public sendRequestQuotaList_args setIp(long ip) {
      this.ip = ip;
      setIpIsSet(true);
      return this;
    }

    public void unsetIp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IP_ISSET_ID);
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return EncodingUtils.testBit(__isset_bitfield, __IP_ISSET_ID);
    }

    public void setIpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IP_ISSET_ID, value);
    }

    public String getDbName() {
      return this.dbName;
    }

    public sendRequestQuotaList_args setDbName(String dbName) {
      this.dbName = dbName;
      return this;
    }

    public void unsetDbName() {
      this.dbName = null;
    }

    /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
    public boolean isSetDbName() {
      return this.dbName != null;
    }

    public void setDbNameIsSet(boolean value) {
      if (!value) {
        this.dbName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_QUOTA_LIST:
        if (value == null) {
          unsetRequestQuotaList();
        } else {
          setRequestQuotaList((List<RequestQuota>)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((Long)value);
        }
        break;

      case DB_NAME:
        if (value == null) {
          unsetDbName();
        } else {
          setDbName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_QUOTA_LIST:
        return getRequestQuotaList();

      case IP:
        return getIp();

      case DB_NAME:
        return getDbName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_QUOTA_LIST:
        return isSetRequestQuotaList();
      case IP:
        return isSetIp();
      case DB_NAME:
        return isSetDbName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendRequestQuotaList_args)
        return this.equals((sendRequestQuotaList_args)that);
      return false;
    }

    public boolean equals(sendRequestQuotaList_args that) {
      if (that == null)
        return false;

      boolean this_present_requestQuotaList = true && this.isSetRequestQuotaList();
      boolean that_present_requestQuotaList = true && that.isSetRequestQuotaList();
      if (this_present_requestQuotaList || that_present_requestQuotaList) {
        if (!(this_present_requestQuotaList && that_present_requestQuotaList))
          return false;
        if (!this.requestQuotaList.equals(that.requestQuotaList))
          return false;
      }

      boolean this_present_ip = true;
      boolean that_present_ip = true;
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (this.ip != that.ip)
          return false;
      }

      boolean this_present_dbName = true && this.isSetDbName();
      boolean that_present_dbName = true && that.isSetDbName();
      if (this_present_dbName || that_present_dbName) {
        if (!(this_present_dbName && that_present_dbName))
          return false;
        if (!this.dbName.equals(that.dbName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestQuotaList = true && (isSetRequestQuotaList());
      list.add(present_requestQuotaList);
      if (present_requestQuotaList)
        list.add(requestQuotaList);

      boolean present_ip = true;
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_dbName = true && (isSetDbName());
      list.add(present_dbName);
      if (present_dbName)
        list.add(dbName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendRequestQuotaList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestQuotaList()).compareTo(other.isSetRequestQuotaList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestQuotaList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestQuotaList, other.requestQuotaList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDbName()).compareTo(other.isSetDbName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, other.dbName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendRequestQuotaList_args(");
      boolean first = true;

      sb.append("requestQuotaList:");
      if (this.requestQuotaList == null) {
        sb.append("null");
      } else {
        sb.append(this.requestQuotaList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      sb.append(this.ip);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbName:");
      if (this.dbName == null) {
        sb.append("null");
      } else {
        sb.append(this.dbName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRequestQuotaList_argsStandardSchemeFactory implements SchemeFactory {
      public sendRequestQuotaList_argsStandardScheme getScheme() {
        return new sendRequestQuotaList_argsStandardScheme();
      }
    }

    private static class sendRequestQuotaList_argsStandardScheme extends StandardScheme<sendRequestQuotaList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRequestQuotaList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_QUOTA_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.requestQuotaList = new ArrayList<RequestQuota>(_list24.size);
                  RequestQuota _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new RequestQuota();
                    _elem25.read(iprot);
                    struct.requestQuotaList.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setRequestQuotaListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ip = iprot.readI64();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbName = iprot.readString();
                struct.setDbNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRequestQuotaList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestQuotaList != null) {
          oprot.writeFieldBegin(REQUEST_QUOTA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requestQuotaList.size()));
            for (RequestQuota _iter27 : struct.requestQuotaList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeI64(struct.ip);
        oprot.writeFieldEnd();
        if (struct.dbName != null) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.dbName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRequestQuotaList_argsTupleSchemeFactory implements SchemeFactory {
      public sendRequestQuotaList_argsTupleScheme getScheme() {
        return new sendRequestQuotaList_argsTupleScheme();
      }
    }

    private static class sendRequestQuotaList_argsTupleScheme extends TupleScheme<sendRequestQuotaList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRequestQuotaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestQuotaList()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetDbName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestQuotaList()) {
          {
            oprot.writeI32(struct.requestQuotaList.size());
            for (RequestQuota _iter28 : struct.requestQuotaList)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetIp()) {
          oprot.writeI64(struct.ip);
        }
        if (struct.isSetDbName()) {
          oprot.writeString(struct.dbName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRequestQuotaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.requestQuotaList = new ArrayList<RequestQuota>(_list29.size);
            RequestQuota _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new RequestQuota();
              _elem30.read(iprot);
              struct.requestQuotaList.add(_elem30);
            }
          }
          struct.setRequestQuotaListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readI64();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dbName = iprot.readString();
          struct.setDbNameIsSet(true);
        }
      }
    }

  }

  public static class sendRequestQuotaList_result implements org.apache.thrift.TBase<sendRequestQuotaList_result, sendRequestQuotaList_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendRequestQuotaList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRequestQuotaList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendRequestQuotaList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendRequestQuotaList_resultTupleSchemeFactory());
    }

    public GetResponseQuota success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetResponseQuota.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRequestQuotaList_result.class, metaDataMap);
    }

    public sendRequestQuotaList_result() {
    }

    public sendRequestQuotaList_result(
      GetResponseQuota success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRequestQuotaList_result(sendRequestQuotaList_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetResponseQuota(other.success);
      }
    }

    public sendRequestQuotaList_result deepCopy() {
      return new sendRequestQuotaList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetResponseQuota getSuccess() {
      return this.success;
    }

    public sendRequestQuotaList_result setSuccess(GetResponseQuota success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetResponseQuota)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendRequestQuotaList_result)
        return this.equals((sendRequestQuotaList_result)that);
      return false;
    }

    public boolean equals(sendRequestQuotaList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendRequestQuotaList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendRequestQuotaList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRequestQuotaList_resultStandardSchemeFactory implements SchemeFactory {
      public sendRequestQuotaList_resultStandardScheme getScheme() {
        return new sendRequestQuotaList_resultStandardScheme();
      }
    }

    private static class sendRequestQuotaList_resultStandardScheme extends StandardScheme<sendRequestQuotaList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRequestQuotaList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetResponseQuota();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRequestQuotaList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRequestQuotaList_resultTupleSchemeFactory implements SchemeFactory {
      public sendRequestQuotaList_resultTupleScheme getScheme() {
        return new sendRequestQuotaList_resultTupleScheme();
      }
    }

    private static class sendRequestQuotaList_resultTupleScheme extends TupleScheme<sendRequestQuotaList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRequestQuotaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRequestQuotaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetResponseQuota();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
